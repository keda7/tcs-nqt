1.Remove a char in a string
#abczzz = abc
def remoe_char(S1,Ch):
    if (len(S1) == 0 or S1 == ""):
        return S1
    SmallAns = remoe_char(S1[1:],Ch)
    if S1[0] == Ch:
        return SmallAns
    else:
        return S1[0] + SmallAns
S1 = "abczzz"
ans = remoe_char(S1,'z')
print(ans)
2.Check if a string is palindrome 
def is_palindrome(s):
    if len(s) <= 1:
        return True
    if s[0] != s[-1]:
        return False
    return is_palindrome(s[1:-1])
3.RETURN SUBSEQUENCE OF A STRING
def return_subsequence(s1):
    if (s1==''):
        ans = ['']
        return ans
    remaining_subseq = return_subsequence(s1[1:])
    first_char = s1[0]
    ans = []
    ans.extend(remaining_subseq)
    for seq in remaining_subseq:
        ans.appendef permutations(s):
    return ans 
4.PERMUTATIONS OF A STRING
def permutations(s):
    result = []
    if (s==""):
        return [""]
    for i in range(len(s)):
        first_char = s[i]  # Pick character at index i
        remaining_string = s[:i] + s[i+1:]  # Remove character at index i
        sub_permutations = permutations(remaining_string)  # Get permutations of remaining string
        for prem in sub_permutations:  # Correctly indented inside the first loop
            result.append(first_char + prem)  # Append new permutation
    return result  # Return final list of permutations
INPUT :  "abc" OUTPUT: ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']
5.GOOGLE KEYPAD INTERVIEW QUESTION
def get_combinations(digits,mapping,index,current):
    if index == len(digits): #if it reaches end 
        return ["".join(current)] #join the letters ["A"],["D"] Then ["AD"] as list
    letters = mapping[digits[index]]
    result = []
    for letter in letters:
        result.extend(get_combinations(digits,mapping,index+1,current + [letter])) # index + 1 iterates both digits and current stored both letters
    return result
def keypad_words(digits): #do define the mapping
    if not digits:
        return []
    mapping =  {
        "2": "ABC", "3": "DEF", "4": "GHI", "5": "JKL",
        "6": "MNO", "7": "PQRS", "8": "TUV", "9": "WXYZ"
    }
    return get_combinations(digits,mapping,0,[]) # an empty list to store the rescurson elements
digits = "23"
print(keypad_words(digits))
OUTPUT : ['AD', 'AE', 'AF', 'BD', 'BE', 'BF', 'CD', 'CE', 'CF'] INPUT : 23

   
